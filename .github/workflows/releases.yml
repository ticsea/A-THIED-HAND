name: Build and Release Forge Mod

on:
  push:
    tags:
      - "v*"  # 当推送类似 v1.0.0 的标签时触发
  workflow_dispatch:  # 可选：允许手动触发

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整 git 历史（用于 changelog）

      - name: Extract Mod Version
        id: version
        run: |
          # 从 gradle.properties 获取版本（推荐方式）
          if [ -f "gradle.properties" ]; then
            MOD_VERSION=$(grep "mod_version" gradle.properties | cut -d'=' -f2 | tr -d '\r')
          # 或者从 mods.toml 获取
          elif [ -f "src/main/resources/META-INF/mods.toml" ]; then
            MOD_VERSION=$(grep "version=" src/main/resources/META-INF/mods.toml | cut -d'"' -f2)
          else
            echo "::error::Cannot determine mod version!"
            exit 1
          fi
          echo "MOD_VERSION=${MOD_VERSION}" >> $GITHUB_ENV
          echo "Detected version: ${MOD_VERSION}"

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      - name: Build Mod
        run: ./gradlew clean build --stacktrace

      - name: Find Built JAR
        id: find_jar
        run: |
          JAR_PATH=$(ls ./build/libs/*-${MOD_VERSION}.jar || ls ./build/libs/*.jar | head -1)
          echo "JAR_PATH=${JAR_PATH}" >> $GITHUB_ENV
          echo "JAR_NAME=$(basename "${JAR_PATH}")" >> $GITHUB_ENV
          echo "Found JAR: ${JAR_PATH}"

      - name: Generate Changelog
        id: changelog
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "${PREV_TAG}" ]; then
            CHANGELOG="Initial release"
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "Changes since ${PREV_TAG:-beginning}:" >> $GITHUB_ENV
          echo "${CHANGELOG}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.MOD_VERSION }}
          name: "${{ github.repository }} v${{ env.MOD_VERSION }}"
          body: "${{ env.CHANGELOG }}"
          draft: false
          prerelease: false
          files: ${{ env.JAR_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}